;;; ---------------------------------------------------------------------------
;;; @title A public resolver; only allows the node's owner to set its address.
;;; @author Daniel Ellison <daniel@syrinx.net>

(seq

  ;; --------------------------------------------------------------------------
  ;; INIT

  ;; Bring in our macro definitions.
  (include "resolver-macros.lll")

  ;; Store the constructor parameter.
  (codecopy scratch-one (bytecodesize) 32)
  (sstore ens-registry @scratch-one)

  ;; --------------------------------------------------------------------------
  ;; CODE

  (returnlll
    (seq

      ;; ----------------------------------------------------------------------
      ;; @notice Returns true if specified node has specified record type.
      ;; @param node The ENS node to query.
      ;; @param kind The record type name, as specified in EIP137.
      ;; @return True if this resolver has a record of the provided type on the
      ;;         provided node.

      (def 'node (calldataload 0x04))
      (def 'kind (calldataload 0x24))

      (function has-record-type
        (seq

          ;; Do the required comparisons and store for return.
          (mstore call-result (|| (&& (= kind "addr")
                                      (!= (get-address node) 0))
                                  (&& (= kind "hash")
                                      (!= (get-hash node) 0))))

          ;; Return boolean result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns true if the resolver implements the interface
      ;;         specified by the provided hash.
      ;; @param interface-id The ID of the interface to check for.
      ;; @return True if the contract implements the requested interface.

      (def 'interface-id (calldataload 0x04))

      (function supports-interface
        (seq

          ;; Do the required comparisons and store for return.
          (mstore call-result (|| (= interface-id 0x3b3b57de)
                                  (= interface-id 0xd8389dc5)))

          ;; Return boolean result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns the address associated with an ENS node.
      ;; @param node The ENS node to query.
      ;; @return The associated address.

      (def 'node (calldataload 0x04))

      (function get-node-address
        (seq

          ;; Retrieve the node's address.
          (mstore call-result (get-address node))

          ;; Return result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Sets the address associated with an ENS node. May only be
      ;;         called by the owner of that node in the ENS registry.
      ;; @param node The node to update.
      ;; @param addr The address to set.

      (def 'node (calldataload 0x04))
      (def 'addr (calldataload 0x24))

      (function set-node-address
        (seq (only-owner node)

          ;; Store the node's new address.
          (set-address node addr)

          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Returns the content hash associated with an ENS node. Note
      ;;         that this resource type is not standardized, and will likely
      ;;         change in future to a resource type based on multihash.
      ;; @param node The ENS node to query.
      ;; @return The associated content hash.

      (def 'node (calldataload 0x04))

      (function get-content-hash
        (seq

          ;; Retrieve the node's content hash.
          (mstore call-result (get-hash node))

          ;; Return result.
          (return call-result 32)))

      ;; ----------------------------------------------------------------------
      ;; @notice Sets the hash associated with an ENS node. May only be
      ;;         called by the owner of that node in the ENS registry. Note
      ;;         that this resource type is not standardized, and will likely
      ;;         change in future to a resource type based on multihash.
      ;; @param node The node to update.
      ;; @param hash The content hash to set.

      (def 'node (calldataload 0x04))
      (def 'hash (calldataload 0x24))

      (function set-content-hash
        (seq (only-owner node)

          ;; Store the node's new hash.
          (set-hash node hash)

          (stop)))

      ;; ----------------------------------------------------------------------
      ;; @notice Fallback: No functions matched the function ID provided.

      (jump invalid-location)))

)
